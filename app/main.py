import asyncio
import logging
from openai import OpenAI
import os
import re
from config import TOKEN, GPT_MODEL, OPENAI_API_KEY, SYSTEM_PROMPT
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import CommandStart
from file_utils import extract_text_from_docx, extract_text_from_pdf

client = OpenAI(api_key=OPENAI_API_KEY)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
button1 = KeyboardButton(text="üìå –û –Ω–∞—Å")
button2 = KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
button3 = KeyboardButton(text="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
button4 = KeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
button5 = KeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[[button2], [button4]],  # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º —Å–ø–∏—Å–∫–æ–≤
    resize_keyboard=True  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
)

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–≥–æ–≤–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .pdf, –∏ —è –Ω–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑.",  reply_markup=keyboard)

# üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
@dp.message(lambda message: message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_support(message: types.Message):
    await message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @MARINA_HMA")


# üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞)
@dp.message(lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def send_instruction(message: types.Message):
    instruction_text = (
        "üìå <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –≤ –º–µ–Ω—è —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>\n"
        "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–≥–æ–≤–æ—Ä –∏ –Ω–∞–π–¥–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
    )
    await message.answer(instruction_text, parse_mode="HTML")

@dp.message(F.content_type == "document")
async def handle_document(message: Message):
    doc = message.document
    if not doc:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    file_ext = doc.file_name.split(".")[-1].lower()

    if file_ext not in ["docx", "pdf"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .pdf.")
        return

    file_path = f"downloads/{doc.file_name}"
    os.makedirs("downloads", exist_ok=True)

    await bot.download(file=doc.file_id, destination=file_path)

    try:
        if file_ext == "docx":
            text = extract_text_from_docx(file_path)
        elif file_ext == "pdf":
            text = extract_text_from_pdf(file_path)

        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–≥–æ–≤–æ—Ä, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

        analysis = await analyze_contract(text)
        htmlText = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', analysis)
        htmlText = re.sub(r'\*(.*?)\*', r'<i>\1</i>', htmlText)
        await send_long_message(message, f"üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:\n\n{htmlText}")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —è –¥–∞–º –í–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", parse_mode="HTML")

async def analyze_contract(text: str) -> str:
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": text}
    ]

    response = client.chat.completions.create(
        model=GPT_MODEL,
        messages=messages,
        temperature=0.7
    )

    return response.choices[0].message.content.strip()

async def send_long_message(message: Message, text: str, chunk_size: int = 4000):
    for i in range(0, len(text), chunk_size):
        chunk = text[i:i+chunk_size]
        await message.answer(chunk, parse_mode="HTML")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())